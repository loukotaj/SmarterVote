name: CI - Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1

jobs:
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        cd pipeline && pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 pipeline/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 pipeline/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: black --check pipeline/
    
    - name: Check import sorting with isort
      run: isort --check-only pipeline/

  test-python:
    name: Test Python Pipeline
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd pipeline && pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest pipeline/ tests/ --cov=pipeline --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  test-apis:
    name: Test API Services
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Test Enqueue API
      run: |
        cd services/enqueue-api
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        PYTHONPATH=../.. python -m pytest test_enqueue_api.py -v
    
    - name: Test Races API
      run: |
        cd services/races-api
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        PYTHONPATH=../.. python -m pytest test_races_api.py -v

  test-web:
    name: Test Web Frontend
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install dependencies
      run: |
        cd web && npm ci
    
    - name: Build SvelteKit
      run: |
        cd web && npm run build
    
    - name: Run unit tests
      run: |
        cd web && npm run test:unit -- --run

  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Format Check
      run: |
        cd infra
        terraform fmt -check -recursive
    
    - name: Terraform Validate
      run: |
        cd infra
        terraform init -backend=false
        terraform validate

  quality-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-python, test-python, test-apis, test-web, terraform-validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Summary
      run: |
        echo "âœ… All tests passing"
        echo "âœ… Code quality checks passed" 
        echo "âœ… Terraform configuration validated"
        echo "ðŸŽ¯ Ready for deployment"
