name: CI Pipeline - SmarterVote Corpus-First

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1

jobs:
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        cd pipeline && pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 pipeline/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 pipeline/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: black --check pipeline/
    
    - name: Check import sorting with isort
      run: isort --check-only pipeline/

  test-python:
    name: Test Python Pipeline
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd pipeline && pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run tests
      run: |
        cd pipeline && python -m pytest ../tests/pipeline/ --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./pipeline/coverage.xml

  build-images:
    name: Build Docker Images
    needs: [lint-python, test-python]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io
    
    - name: Build and push pipeline image
      uses: docker/build-push-action@v5
      with:
        context: ./pipeline
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/smartervote-pipeline:latest
          gcr.io/${{ env.PROJECT_ID }}/smartervote-pipeline:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push enqueue-api image
      uses: docker/build-push-action@v5
      with:
        context: ./services/enqueue-api
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/smartervote-enqueue-api:latest
          gcr.io/${{ env.PROJECT_ID }}/smartervote-enqueue-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-web:
    name: Test Web Frontend
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install dependencies
      run: |
        cd web && npm ci
    
    - name: Build SvelteKit
      run: |
        cd web && npm run build
    
    - name: Run unit tests
      run: |
        cd web && npm run test:unit
    
    - name: Install Playwright
      run: |
        cd web && npx playwright install --with-deps
    
    - name: Run Playwright tests
      run: |
        cd web && npm run test:integration

  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Format Check
      run: |
        cd infra
        terraform fmt -check -recursive
    
    - name: Terraform Validate
      run: |
        cd infra/envs/dev
        terraform init -backend=false
        terraform validate

  milestone-day1:
    name: Day 1 Milestone Check
    runs-on: ubuntu-latest
    needs: [build-images, terraform-validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Day 1 Deliverables
      run: |
        echo "âœ… Terraform skeleton validated"
        echo "âœ… Docker images built and pushed"
        echo "âœ… Pipeline structure ready"
        echo "ðŸŽ¯ Day 1 Milestone: Terraform skeleton deployed, empty Cloud Run Job succeeds"
