name: Deploy SmarterVote Infrastructure & Services

on:
  workflow_run:
    workflows: ["CI - Quality Gates"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  ENVIRONMENT: dev  # Change to 'staging' or 'prod' as needed

jobs:
  build-and-deploy-services:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
    - uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    # Build and push all container images
    - name: Build and Push Pipeline Worker
      run: |
        cd pipeline
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/pipeline:${{ github.sha }} \
                     -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/pipeline:latest .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/pipeline:${{ github.sha }}
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/pipeline:latest

    - name: Build and Push Enqueue API
      run: |
        cd services/enqueue-api
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/enqueue-api:${{ github.sha }} \
                     -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/enqueue-api:latest .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/enqueue-api:${{ github.sha }}
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/enqueue-api:latest

    - name: Build and Push Races API
      run: |
        cd services/races-api
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/races-api:${{ github.sha }} \
                     -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/races-api:latest .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/races-api:${{ github.sha }}
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/races-api:latest

    # Deploy services using the new Terraform naming convention and Artifact Registry
    - name: Update Cloud Run Job (Pipeline Worker)
      run: |
        gcloud run jobs update race-worker-${{ env.ENVIRONMENT }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/pipeline:${{ github.sha }} \
          --region ${{ env.REGION }}

    - name: Deploy Enqueue API Service
      run: |
        gcloud run services update enqueue-api-${{ env.ENVIRONMENT }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/enqueue-api:${{ github.sha }} \
          --region ${{ env.REGION }}

    - name: Deploy Races API Service
      run: |
        gcloud run services update races-api-${{ env.ENVIRONMENT }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/races-api:${{ github.sha }} \
          --region ${{ env.REGION }}

    # Optional: Test endpoints after deployment
    - name: Test API Endpoints
      run: |
        echo "Testing Enqueue API..."
        ENQUEUE_URL=$(gcloud run services describe enqueue-api-${{ env.ENVIRONMENT }} --region=${{ env.REGION }} --format='value(status.url)')
        curl -f "$ENQUEUE_URL/health" || echo "Enqueue API health check failed"

        echo "Testing Races API..."
        RACES_URL=$(gcloud run services describe races-api-${{ env.ENVIRONMENT }} --region=${{ env.REGION }} --format='value(status.url)')
        curl -f "$RACES_URL/races" || echo "Races API health check failed"
