name: Deploy Infrastructure

on:
  workflow_run:
    workflows: ["CI - Quality Gates"]
    types:
      - completed
    branches: [main]
  push:
    branches: [main]
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev/staging/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - rollback

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
  ACTION: ${{ github.event.inputs.action || 'apply' }}
  TF_VAR_app_version: ${{ github.sha }}

jobs:
  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.event.head_commit.modified, 'infra/')) }}
    strategy:
      matrix:
        container:
          - name: pipeline
            dockerfile: pipeline/Dockerfile
            context: .
          - name: enqueue-api
            dockerfile: services/enqueue-api/Dockerfile
            context: services/enqueue-api
          - name: races-api
            dockerfile: services/races-api/Dockerfile
            context: .

    steps:
    - uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      if: env.ACTION == 'apply' || github.event_name != 'workflow_dispatch'
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Build and Push ${{ matrix.container.name }}
      if: env.ACTION == 'apply' || github.event_name != 'workflow_dispatch'
      run: |
        docker build -f ${{ matrix.container.dockerfile }} \
                     -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/${{ matrix.container.name }}:${{ github.sha }} \
                     -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/${{ matrix.container.name }}:latest \
                     ${{ matrix.container.context }}
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/${{ matrix.container.name }}:${{ github.sha }}
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/smartervote-${{ env.ENVIRONMENT }}/${{ matrix.container.name }}:latest

  deploy-terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-containers
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.event.head_commit.modified, 'infra/')) }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Create Terraform variables file
      run: |
        cd infra
        cat > github-actions.tfvars << EOF
        project_id = "${{ env.PROJECT_ID }}"
        region = "${{ env.REGION }}"
        environment = "${{ env.ENVIRONMENT }}"
        app_version = "${{ env.TF_VAR_app_version }}"
        openai_api_key = "${{ secrets.OPENAI_API_KEY }}"
        anthropic_api_key = "${{ secrets.ANTHROPIC_API_KEY }}"
        grok_api_key = "${{ secrets.GROK_API_KEY }}"
        google_search_api_key = "${{ secrets.GOOGLE_SEARCH_API_KEY }}"
        google_search_cx = "${{ secrets.GOOGLE_SEARCH_CX }}"

        # ChromaDB Configuration
        chroma_chunk_size = 500
        chroma_chunk_overlap = 50
        chroma_embedding_model = "all-MiniLM-L6-v2"
        chroma_similarity_threshold = 0.7
        chroma_max_results = 100
        chroma_persist_dir = "/app/data/chroma_db"
        EOF

    - name: Check if state bucket exists
      run: |
        if ! gsutil ls -b gs://smartervote-terraform-state >/dev/null 2>&1; then
          echo "Creating Terraform state bucket..."
          gsutil mb -p ${{ env.PROJECT_ID }} -l ${{ env.REGION }} gs://smartervote-terraform-state
          gsutil versioning set on gs://smartervote-terraform-state
        fi

    - name: Terraform Init
      run: |
        cd infra
        terraform init

    - name: Store Current State (for rollback)
      if: env.ACTION == 'apply' && github.ref == 'refs/heads/main'
      run: |
        cd infra
        if [ -f "terraform.tfstate" ]; then
          BACKUP_FILE="terraform-state-backup-$(date +%Y%m%d-%H%M%S).json"
          terraform show -json > "../$BACKUP_FILE"
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV
        fi

    - name: Terraform Validate
      run: |
        cd infra
        terraform validate

    - name: Terraform Plan
      if: env.ACTION != 'rollback'
      run: |
        cd infra
        terraform plan -var-file=github-actions.tfvars -out=tfplan
        terraform show -json tfplan > ../terraform-plan.json

    - name: Upload Plan Artifact
      if: env.ACTION == 'plan'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ env.ENVIRONMENT }}
        path: terraform-plan.json
        retention-days: 30

    - name: Terraform Apply with Failure Handling
      if: env.ACTION == 'apply' && github.ref == 'refs/heads/main'
      run: |
        cd infra
        set +e  # Don't exit on error
        terraform apply -auto-approve tfplan
        APPLY_EXIT_CODE=$?

        if [ $APPLY_EXIT_CODE -ne 0 ]; then
          echo "❌ Terraform apply failed! Attempting rollback..."

          # Try to rollback to previous commit
          PREV_COMMIT=$(git log --oneline -n 2 --format="%H" -- . | tail -n 1)

          echo "🔄 Rolling back to commit: $PREV_COMMIT"
          git checkout $PREV_COMMIT -- .
          terraform init
          terraform plan -var-file=github-actions.tfvars -out=rollback-plan
          terraform apply -auto-approve rollback-plan

          echo "::error::Terraform apply failed and rollback attempted"
          exit 1
        fi

    - name: Manual Rollback
      if: env.ACTION == 'rollback'
      run: |
        cd infra
        echo "🔄 Performing manual rollback..."
        PREV_COMMIT=$(git log --oneline -n 2 --format="%H" -- . | tail -n 1)
        git checkout $PREV_COMMIT -- .
        terraform init
        terraform plan -var-file=github-actions.tfvars -out=rollback-plan
        terraform apply -auto-approve rollback-plan

    - name: Upload State Backup
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-state-backup-${{ env.ENVIRONMENT }}-${{ github.sha }}
        path: terraform-state-backup-*.json
        retention-days: 30
        if-no-files-found: ignore

    - name: Output Infrastructure Summary
      if: always()
      run: |
        cd infra
        echo "## 🚀 SmarterVote Infrastructure Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Action**: ${{ env.ACTION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${{ env.PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.TF_VAR_app_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ env.ACTION }}" = "apply" ] || [ "${{ env.ACTION }}" = "rollback" ]; then
          echo "### 📋 Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY || echo "- No outputs available" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GCP Console](https://console.cloud.google.com/home/dashboard?project=${{ env.PROJECT_ID }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloud Run Services](https://console.cloud.google.com/run?project=${{ env.PROJECT_ID }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Storage Buckets](https://console.cloud.google.com/storage/browser?project=${{ env.PROJECT_ID }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Terraform State](https://console.cloud.google.com/storage/browser/smartervote-terraform-state?project=${{ env.PROJECT_ID }})" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Clean up secrets
      run: |
        cd infra
        rm -f github-actions.tfvars
