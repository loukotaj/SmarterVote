name: Deploy Infrastructure

on:
  workflow_run:
    workflows: ["CI - Quality Gates"]
    types:
      - completed
    branches: [main]
  push:
    branches: [main]
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev/staging/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  deploy-terraform:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.event.head_commit.modified, 'infra/')) }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Create Terraform variables file
      run: |
        cd infra
        cat > github-actions.tfvars << EOF
        project_id = "${{ env.PROJECT_ID }}"
        region = "${{ env.REGION }}"
        environment = "${{ env.ENVIRONMENT }}"
        openai_api_key = "${{ secrets.OPENAI_API_KEY }}"
        anthropic_api_key = "${{ secrets.ANTHROPIC_API_KEY }}"
        grok_api_key = "${{ secrets.GROK_API_KEY }}"
        google_search_api_key = "${{ secrets.GOOGLE_SEARCH_API_KEY }}"
        google_search_cx = "${{ secrets.GOOGLE_SEARCH_CX }}"

        # ChromaDB Configuration
        chroma_chunk_size = 500
        chroma_chunk_overlap = 50
        chroma_embedding_model = "all-MiniLM-L6-v2"
        chroma_similarity_threshold = 0.7
        chroma_max_results = 100
        chroma_persist_dir = "/app/data/chroma_db"
        EOF

    - name: Terraform Init
      run: |
        cd infra
        terraform init

    - name: Terraform Plan
      run: |
        cd infra
        terraform plan -var-file=github-actions.tfvars

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd infra
        terraform apply -var-file=github-actions.tfvars -auto-approve

    - name: Output Infrastructure URLs
      run: |
        cd infra
        echo "## ðŸš€ Deployed Infrastructure" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: ${{ env.PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY

    - name: Clean up secrets
      run: |
        cd infra
        rm -f github-actions.tfvars
